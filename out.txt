# 1 "main.c"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "main.c"
# 1 "/usr/local/bin/../share/sdcc/include/stdio.h" 1 3 4
# 32 "/usr/local/bin/../share/sdcc/include/stdio.h" 3 4
# 1 "/usr/local/bin/../share/sdcc/include/stdarg.h" 1 3 4
# 53 "/usr/local/bin/../share/sdcc/include/stdarg.h" 3 4
typedef unsigned char __data * va_list;
# 33 "/usr/local/bin/../share/sdcc/include/stdio.h" 2 3 4





# 1 "/usr/local/bin/../share/sdcc/include/sdcc-lib.h" 1 3 4
# 52 "/usr/local/bin/../share/sdcc/include/sdcc-lib.h" 3 4
# 1 "/usr/local/bin/../share/sdcc/include/asm/mcs51/features.h" 1 3 4
# 53 "/usr/local/bin/../share/sdcc/include/sdcc-lib.h" 2 3 4
# 39 "/usr/local/bin/../share/sdcc/include/stdio.h" 2 3 4
# 50 "/usr/local/bin/../share/sdcc/include/stdio.h" 3 4
  typedef unsigned int size_t;
# 68 "/usr/local/bin/../share/sdcc/include/stdio.h" 3 4
typedef void (*pfn_outputchar)(char c, void* p) __reentrant;

extern int _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap);



extern void printf_small (char *,...) __reentrant;
extern int printf (const char *,...);
extern int vprintf (const char *, va_list);
extern int sprintf (char *, const char *, ...);
extern int vsprintf (char *, const char *, va_list);
extern int puts(const char *);


extern char *gets(char *);


extern char getchar(void);
extern void putchar(char);


extern void printf_fast(__code const char *fmt, ...) __reentrant;
extern void printf_fast_f(__code const char *fmt, ...) __reentrant;
extern void printf_tiny(__code const char *fmt, ...) __reentrant;
# 2 "main.c" 2
# 1 "/usr/local/bin/../share/sdcc/include/string.h" 1 3 4
# 66 "/usr/local/bin/../share/sdcc/include/string.h" 3 4
extern void *memcpy (void * dest, const void * src, size_t n);
extern void *memmove (void *dest, const void *src, size_t n);
extern char *strcpy (char * dest, const char * src);
extern char *strncpy(char * dest, const char * src, size_t n);


extern char *strcat (char * dest, const char * src);
extern char *strncat(char * dest, const char * src, size_t n);


extern int memcmp (const void *s1, const void *s2, size_t n);
extern int strcmp (const char *s1, const char *s2);


extern int strncmp(const char *s1, const char *s2, size_t n);
extern size_t strxfrm(char *dest, const char *src, size_t n);


extern void *memchr (const void *s, int c, size_t n);

extern char *strchr (const char *s, char c);



extern size_t strcspn(const char *s, const char *reject);
extern char *strpbrk(const char *s, const char *accept);

extern char *strrchr(const char *s, char c);



extern size_t strspn (const char *s, const char *accept);
extern char *strstr (const char *haystack, const char *needle);
extern char *strtok (char * str, const char * delim);



extern void *memset (void *s, unsigned char c, size_t n);





extern size_t strlen (const char *s);
# 3 "main.c" 2
# 1 "/usr/local/bin/../share/sdcc/include/stdint.h" 1 3 4
# 43 "/usr/local/bin/../share/sdcc/include/stdint.h" 3 4
typedef signed char int8_t;
typedef short int int16_t;
typedef long int int32_t;





typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef unsigned long int uint32_t;







typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef long int int_least32_t;





typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned long int uint_least32_t;







typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef long int int_fast32_t;





typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned long int uint_fast32_t;






  typedef long int intptr_t;
  typedef unsigned long int uintptr_t;
# 106 "/usr/local/bin/../share/sdcc/include/stdint.h" 3 4
typedef long int intmax_t;
typedef unsigned long int uintmax_t;
# 4 "main.c" 2

# 1 "stm8s.h" 1
# 9 "stm8s.h"
typedef struct {
 uint8_t ODR;
 uint8_t IDR;
 uint8_t DDR;
 uint8_t CR1;
 uint8_t CR2;
} port_t;
# 32 "stm8s.h"
typedef struct {
 uint8_t SBK:1;
 uint8_t RWU:1;
 uint8_t REN:1;
 uint8_t TEN:1;
 uint8_t ILIEN:1;
 uint8_t RIEN:1;
 uint8_t TCIEN:1;
 uint8_t TIEN:1;
} UART1_CR2_t;



typedef struct {
 uint8_t LINEN:1;
 uint8_t STOP:2;
 uint8_t CLKEN:1;
 uint8_t CPOL:1;
 uint8_t CPHA:1;
 uint8_t LBCL:1;
} UART1_CR3_t;
# 67 "stm8s.h"
typedef struct {
 uint8_t CEN:1;
 uint8_t UDIS:1;
 uint8_t URS:1;
 uint8_t OPM:1;
 uint8_t RESERVED0:3;
 uint8_t ARPE:1;
} tim2_cr1_t;



typedef struct {
 uint8_t UIE:1;
 uint8_t CC1IE:1;
 uint8_t CC2IE:1;
 uint8_t CC3IE:1;
} tim2_ier_t;



typedef struct {
 uint8_t UIF:1;
 uint8_t CC1IF:1;
 uint8_t CC2IF:1;
 uint8_t CC3IF:1;
} tim2_sr1_t;
# 140 "stm8s.h"
typedef enum {
 IRQ_TLI = 0,
 IRQ_AWU,
 IRQ_CLK,
 IRQ_EXTI0,
 IRQ_EXTI1,
 IRQ_EXTI2,
 IRQ_EXTI3,
 IRQ_EXTI4,
 IRQ_RESERVED0,
 IRQ_RESERVED1,
 IRQ_SPI,
 IRQ_TIM1,
 IRQ_TIM1_COMPARE,
 IRQ_TIM2,
 IRQ_TIM2_COMPARE,
 IRQ_RESERVED2,
 IRQ_RESERVED3,
 IRQ_UART1,
 IRQ_UART1_FULL,
 IRQ_I2C,
 IRQ_RESERVED4,
 IRQ_RESERVED5,
 IRQ_ADC1,
 IRQ_TIM4,
 IRQ_FLASH = 24
} irq_t;

inline void __disable_interrupt(void) {
 __asm
 sim
 __endasm;
}

inline void __enable_interrupt(void) {
 __asm
 rim
 __endasm;
}

inline void __wait_for_interrupt(void) {
 __asm
 wfi
 __endasm;
}

inline void __nop(void) {
 __asm
 nop
 __endasm;
}
# 6 "main.c" 2
# 1 "lib.h" 1
# 10 "lib.h"
inline void gpio_input (volatile port_t * port, uint8_t pin) {
 uint8_t value = port->DDR;
 port->DDR = value & ~(1 << pin);
}

inline void gpio_output (volatile port_t * port, uint8_t pin) {
 uint8_t value = port->DDR;
 port->DDR = value | (1 << pin);
}

inline uint8_t gpio_read (uint8_t pin) {
 uint8_t value = ((volatile port_t *) (0x5000 + 3*0x5))->ODR;
 return (value >> pin) & 0x1;
}

inline void gpio_write (uint8_t pin, uint8_t val) {
 uint8_t value = ((volatile port_t *) (0x5000 + 3*0x5))->ODR;
 ((volatile port_t *) (0x5000 + 3*0x5))->ODR = (value & ~(1 << pin)) | (1 << val);
}




inline void init_timer2()
{
    (*((volatile uint8_t *)(0x5300))) = 0;
    (*((volatile uint8_t *)(0x5303))) = 0;
    (*((volatile uint8_t *)(0x5305))) = 0;
    (*((volatile uint8_t *)(0x530A))) = 0;
    (*((volatile uint8_t *)(0x530B))) = 0;
    (*((volatile uint8_t *)(0x530A))) = 0;
    (*((volatile uint8_t *)(0x530B))) = 0;
    (*((volatile uint8_t *)(0x5307))) = 0;
    (*((volatile uint8_t *)(0x5308))) = 0;
    (*((volatile uint8_t *)(0x5309))) = 0;
    (*((volatile uint8_t *)(0x530C))) = 0;
    (*((volatile uint8_t *)(0x530D))) = 0;
    (*((volatile uint8_t *)(0x530E))) = 0;
    (*((volatile uint8_t *)(0x530F))) = 0;
    (*((volatile uint8_t *)(0x5310))) = 0;
    (*((volatile uint8_t *)(0x5311))) = 0;
    (*((volatile uint8_t *)(0x5312))) = 0;
    (*((volatile uint8_t *)(0x5313))) = 0;
    (*((volatile uint8_t *)(0x5314))) = 0;
    (*((volatile uint8_t *)(0x5315))) = 0;
    (*((volatile uint8_t *)(0x5316))) = 0;
    (*((volatile uint8_t *)(0x5304))) = 0;
}





inline void config_timer2()
{
    (*((volatile uint8_t *)(0x530E))) = 0x08;
    (*((volatile uint8_t *)(0x530F))) = 0xff;
    (*((volatile uint8_t *)(0x5310))) = 0xff;
    ((volatile tim2_ier_t *)(0x5303))->UIE = 1;
    ((volatile tim2_cr1_t *)(0x5300))->CEN = 1;
}

inline uint16_t read_timer1 (void) {
 uint8_t h = (*((volatile uint8_t *)(0x525e)));
 uint8_t l = (*((volatile uint8_t *)(0x525f)));
 return((uint16_t)(h) << 8 | l);
}


inline void config_ports (void) {
 gpio_output(((volatile port_t *) (0x5000 + 3*0x5)), 0);
 gpio_output(((volatile port_t *) (0x5000 + 3*0x5)), 5);



 gpio_input(((volatile port_t *) (0x5000 + 3*0x5)), 6);

((volatile port_t *) (0x5000 + 1*0x5))->DDR &= 0xcf;
((volatile port_t *) (0x5000 + 1*0x5))->CR1 &= 0xcf;
((volatile port_t *) (0x5000 + 1*0x5))->CR2 &= 0xcf;
}

inline void uart1_2400 (void) {
    (*((volatile uint8_t *)(0x5232))) = 0xA0;
    (*((volatile uint8_t *)(0x5233))) = 0x1B;
}

inline void uart1_9600 (void) {
    (*((volatile uint8_t *)(0x5232))) = 0x68;
    (*((volatile uint8_t *)(0x5233))) = 0x03;
}

inline void uart1_19200 (void) {
    (*((volatile uint8_t *)(0x5232))) = 0x34;
    (*((volatile uint8_t *)(0x5233))) = 0x01;
}

inline void uart1_57600 (void) {
    (*((volatile uint8_t *)(0x5232))) = 0x11;
    (*((volatile uint8_t *)(0x5233))) = 0x06;
}

inline void uart1_115200 (void) {
    (*((volatile uint8_t *)(0x5232))) = 0x08;
    (*((volatile uint8_t *)(0x5233))) = 0x0B;
}

inline void uart1_230400 (void) {
    (*((volatile uint8_t *)(0x5232))) = 0x04;
    (*((volatile uint8_t *)(0x5233))) = 0x05;
}

inline void uart1_460800 (void) {
    (*((volatile uint8_t *)(0x5232))) = 0x02;
    (*((volatile uint8_t *)(0x5233))) = 0x03;
}

inline void uart1_921600 (void) {
    (*((volatile uint8_t *)(0x5232))) = 0x01;
    (*((volatile uint8_t *)(0x5233))) = 0x01;
}

inline void config_uart (void) {
    do { static const UART1_CR2_t stru = { .TCIEN = 1, .TIEN = 1, .TEN = 1, .RIEN = 1, .REN = 1 }; (*((volatile uint8_t *)(0x5235))) = *((volatile uint8_t *) &stru); } while (0);
    do { static const UART1_CR3_t stru = { .STOP = 2 }; (*((volatile uint8_t *)(0x5236))) = *((volatile uint8_t *) &stru); } while (0);
    uart1_19200();
}

inline uint8_t uart_tx_complete (void) {
 return (*((volatile uint8_t *)(0x5230))) & (1 << 7);
}

uint8_t uart_rx_available (void) {
 return (*((volatile uint8_t *)(0x5230))) & (1 << 5);
}

inline uint8_t uart_tc_complete (void) {
    return (*((volatile uint8_t *)(0x5230))) & (1 << 6);
}

inline void uart_wait () {

 while(!((*((volatile uint8_t *)(0x5230))) & (1 << 7)));

}

inline void uart_write (char c) {
 (*((volatile uint8_t *)(0x5231))) = c;
}

inline void init_clock (void) {
    (*((volatile uint8_t *)(0x50c6))) = 0x00;

    (*((volatile uint8_t *)(0x50c7))) = 0xFF;
}
# 7 "main.c" 2


char uartstr[16] = "Tessel Tag\r\n";
const uint8_t uartstr_len = 12;
volatile uint8_t pos = 0;






void I2C_Init(void);
void I2C_Write(uint8_t Addr, uint8_t Reg, uint8_t Data);
void i2c_read_byte(uint8_t Addr, uint8_t Reg);
uint16_t I2C_ReadWord(uint8_t Addr, uint8_t Reg);

void I2C_Init(void)
{
 (*((volatile uint8_t *)(0x5210 + 0x00))) = 0x00;
 (*((volatile uint8_t *)(0x5210 + 0x01))) = 0x04;


 (*((volatile uint8_t *)(0x5210 + 0x02))) = 10;



 (*((volatile uint8_t *)(0x5210 + 0x04))) = 0x00;
 (*((volatile uint8_t *)(0x5210 + 0x03))) = 0x00;
 (*((volatile uint8_t *)(0x5210 + 0x0A))) = 0x01;


 (*((volatile uint8_t *)(0x5210 + 0x0C))) = 0x80;
 (*((volatile uint8_t *)(0x5210 + 0x0B))) = 30;


 (*((volatile uint8_t *)(0x5210 + 0x00))) = 0x01;
}

void I2C_Write(uint8_t Addr, uint8_t Reg, uint8_t Data)
{
 uint8_t Temp;
 uint32_t i;

 (*((volatile uint8_t *)(0x5210 + 0x01))) |= 0x01;
 while(((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x01) == 0);

 (*((volatile uint8_t *)(0x5210 + 0x06))) = Addr;
 while(((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x02) == 0);
 Temp = (*((volatile uint8_t *)(0x5210 + 0x09)));

 (*((volatile uint8_t *)(0x5210 + 0x06))) = Reg;
 while(((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x80) == 0);

 (*((volatile uint8_t *)(0x5210 + 0x06))) = Data;
 while(((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x80) == 0);

 (*((volatile uint8_t *)(0x5210 + 0x01))) |= 0x02;
 i = 0xFFFF;
 while(i--);
}
# 83 "main.c"
uint8_t I2C_ReadByte_Result_Addr = 0;
uint8_t I2C_ReadByte_Result_Reg = 0;
uint8_t I2C_ReadByte_Result_Ready = 1;
uint8_t I2C_ReadByte_Result_Value = 0;


void I2C_ReadByte_Inner(void)
{
 static uint8_t Temp, Byte_Read;

 static int scrLine = 0; switch(scrLine) { case 0:;;

 while (I2C_ReadByte_Result_Ready) {
    do { scrLine=96; return; case 96:; } while (0);
 }





 (*((volatile uint8_t *)(0x5210 + 0x01))) |= 0x01;
 while (((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x01) == 0) {
     do { scrLine=105; return; case 105:; } while (0);
 }



 (*((volatile uint8_t *)(0x5210 + 0x06))) = I2C_ReadByte_Result_Addr;

 while (((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x02) == 0) {
     do { scrLine=113; return; case 113:; } while (0);
 }
 Temp = (*((volatile uint8_t *)(0x5210 + 0x09)));



 (*((volatile uint8_t *)(0x5210 + 0x06))) = I2C_ReadByte_Result_Reg;
 while (((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x80) == 0) {
     do { scrLine=121; return; case 121:; } while (0);
 }



 (*((volatile uint8_t *)(0x5210 + 0x01))) |= 0x01;
 while (((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x01) == 0) {
     do { scrLine=128; return; case 128:; } while (0);
 }



 (*((volatile uint8_t *)(0x5210 + 0x06))) = (I2C_ReadByte_Result_Addr | 0x01);
 while (((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x02) == 0) {
     do { scrLine=135; return; case 135:; } while (0);
 }
 Temp = (*((volatile uint8_t *)(0x5210 + 0x09)));



 (*((volatile uint8_t *)(0x5210 + 0x01))) |= 0x02;



 while (((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x40) == 0) {
     do { scrLine=146; return; case 146:; } while (0);
 }
 Byte_Read = 0x00;
 Byte_Read = (*((volatile uint8_t *)(0x5210 + 0x06)));



 I2C_ReadByte_Result_Ready = 1;
 I2C_ReadByte_Result_Value = Byte_Read;


 } return;
}

void i2c_read_byte (uint8_t addr, uint8_t reg) {
    I2C_ReadByte_Result_Addr = addr;
    I2C_ReadByte_Result_Reg = reg;
    I2C_ReadByte_Result_Ready = 0;
    I2C_ReadByte_Inner();
}

uint8_t i2c_read_byte_result (uint8_t* result) {
    if (I2C_ReadByte_Result_Ready) {
        *result = I2C_ReadByte_Result_Value;
    }
    return I2C_ReadByte_Result_Ready ? 0 : 1;
}

uint16_t I2C_ReadWord(uint8_t Addr, uint8_t Reg)
{
 uint8_t Temp, HighByteRead, LowByteRead;
 uint16_t WordRead;

 uartstr[0] = 'U';

 (*((volatile uint8_t *)(0x5210 + 0x01))) |= 0x01;
 while(((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x01) == 0);

 uartstr[0] = 'V';

 (*((volatile uint8_t *)(0x5210 + 0x06))) = Addr;
 while(((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x02) == 0);
 Temp = (*((volatile uint8_t *)(0x5210 + 0x09)));

 uartstr[0] = 'W';

 (*((volatile uint8_t *)(0x5210 + 0x06))) = Reg;
 while(((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x80) == 0);

 uartstr[0] = 'X';

 (*((volatile uint8_t *)(0x5210 + 0x01))) |= 0x01;
 while(((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x01) == 0);

 uartstr[0] = 'Y';

 (*((volatile uint8_t *)(0x5210 + 0x06))) = (Addr | 0x01);
 while(((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x02) == 0);
 Temp = (*((volatile uint8_t *)(0x5210 + 0x09)));

 uartstr[0] = 'Z';

 (*((volatile uint8_t *)(0x5210 + 0x01))) |= 0x04;

 uartstr[0] = 'A';

 while(((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x40) == 0);
 HighByteRead = 0x00;
 HighByteRead = (*((volatile uint8_t *)(0x5210 + 0x06)));

 uartstr[0] = 'B';

 (*((volatile uint8_t *)(0x5210 + 0x01))) |= 0x02;

 uartstr[0] = 'C';

 while(((*((volatile uint8_t *)(0x5210 + 0x07))) & 0x40) == 0);
 LowByteRead = 0x00;
 LowByteRead = (*((volatile uint8_t *)(0x5210 + 0x06)));

 uartstr[0] = 'D';

 WordRead = (LowByteRead | (HighByteRead << 8));
 return WordRead;
}

void write_chars (char* to, uint8_t val) {
    uint8_t high = val >> 4;
    uint8_t low = val & 0xf;
    to[0] = high > 0x9 ? 0x61 + (high - 0xa) : 0x30 + high;
    to[1] = low > 0x9 ? 0x61 + (low - 0xa) : 0x30 + low;
}

volatile int doread = 0;

void uart_timer (void) __interrupt(IRQ_UART1) {
    volatile uint8_t a;


    if (uart_tx_complete()) {

        if (pos < uartstr_len) {
            uart_write(uartstr[pos]);
            ++pos;
        }
    }
    if (uart_tc_complete()) {


        uart_write('!');
        ((volatile UART1_CR2_t *)(0x5235))->TEN = 0;
    }
    if (uart_rx_available()) {
        a = (*((volatile uint8_t *)(0x5231)));




    }
}


void irq_timer2 (void) __interrupt(IRQ_TIM2) {
    doread = 1;

    ((volatile tim2_sr1_t *)(0x5304))->UIF = 0;
}


void irq_i2c (void) __interrupt(IRQ_I2C) {

}

void looper (void) {
    static int scrLine = 0; switch(scrLine) { case 0:;;
    gpio_write(0, 1);
    do { scrLine=282; return; case 282:; } while (0);
    gpio_write(0, 0);
    } return;
}




void main (void) {
    volatile uint8_t a;
    uint8_t regread;
    int32_t c;
    int32_t f;

    __disable_interrupt();
    init_clock();
    init_timer2();
    I2C_Init();
    config_ports();
    config_timer2();
    config_uart();
    gpio_write(0, 0);

    a = (*((volatile uint8_t *)(0x5231)));
    __enable_interrupt();



    while (1) {


        __wait_for_interrupt();

        if (doread) {
            looper();

            doread = 0;
# 334 "main.c"
        }
# 354 "main.c"
    }
}
